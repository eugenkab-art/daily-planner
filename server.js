require('dotenv').config();

const express = require("express");
const { Pool } = require("pg");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const app = express();
const port = process.env.PORT || 3809;

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–¢–ß - –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
const net = require('net');
const originalConnect = net.Socket.prototype.connect;

net.Socket.prototype.connect = function(...args) {
    if (args[0] && typeof args[0] === 'object') {
        args[0].family = 4; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ IPv4
    }
    return originalConnect.apply(this, args);
};

console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è IPv4');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º pooler
const pool = new Pool({
  connectionString: 'postgresql://postgres.bmqtmlpayroihrxmwzfj:MyDailyPlanner123@aws-1-eu-west-2.pooler.supabase.com:6543/postgres',
  ssl: { 
    rejectUnauthorized: false 
  },
  connectionTimeoutMillis: 15000,
  idleTimeoutMillis: 30000
});

console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase Connection Pooler —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º');

console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase Connection Pooler');
const pool = new Pool({
  connectionString: forcedIPv4ConnectionString,
  ssl: { 
    rejectUnauthorized: false 
  },
  // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è IPv4
  connectionTimeoutMillis: 15000,
  idleTimeoutMillis: 30000,
  max: 10
});

console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π IPv4 —á–µ—Ä–µ–∑ pooler');

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/api/db-info', async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT version(), current_database(), current_user');
    client.release();
    
    res.json({
      success: true,
      version: result.rows[0].version,
      database: result.rows[0].current_database,
      user: result.rows[0].current_user
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      code: error.code
    });
  }
});

// JWT —Å–µ–∫—Ä–µ—Ç
const JWT_SECRET = process.env.JWT_SECRET || 'daily-planner-secret-key-2024';

// Middleware
app.use(express.static(__dirname));
app.use(express.json());

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async function initializeDatabase() {
    try {
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫
        await pool.query(`
            CREATE TABLE IF NOT EXISTS notes (
                id SERIAL PRIMARY KEY,
                text TEXT NOT NULL,
                done BOOLEAN DEFAULT FALSE,
                date DATE DEFAULT CURRENT_DATE,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:', error);
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        
        const result = await pool.query(
            "INSERT INTO users (username, password) VALUES ($1, $2) RETURNING id, username",
            [username, hashedPassword]
        );

        const user = result.rows[0];
        const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET);
        
        res.json({ 
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 
            token,
            user: { id: user.id, username: user.username }
        });
    } catch (error) {
        if (error.code === '23505') {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const result = await pool.query(
            "SELECT * FROM users WHERE username = $1",
            [username]
        );

        if (result.rows.length === 0) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = result.rows[0];
        const validPassword = await bcrypt.compare(password, user.password);
        
        if (!validPassword) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
        }

        const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET);
        
        res.json({ 
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', 
            token,
            user: { id: user.id, username: user.username }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
app.get('/api/notes', authenticateToken, async (req, res) => {
    const date = req.query.date || new Date().toISOString().split('T')[0];
    const userId = req.user.id;

    try {
        const result = await pool.query(
            "SELECT * FROM notes WHERE date = $1 AND user_id = $2 ORDER BY id",
            [date, userId]
        );
        
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
app.post('/api/notes', authenticateToken, async (req, res) => {
    const note = req.body.text;
    const date = req.body.date || new Date().toISOString().split('T')[0];
    const userId = req.user.id;
    
    if (!note || note.trim() === '') {
        return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    try {
        const result = await pool.query(
            "INSERT INTO notes (text, date, user_id) VALUES ($1, $2, $3) RETURNING *",
            [note.trim(), date, userId]
        );
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
app.put('/api/notes/:id/toggle', authenticateToken, async (req, res) => {
    const id = req.params.id;
    const userId = req.user.id;

    try {
        const result = await pool.query(
            "UPDATE notes SET done = NOT done WHERE id = $1 AND user_id = $2 RETURNING *",
            [id, userId]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
app.delete('/api/notes/:id', authenticateToken, async (req, res) => {
    const id = req.params.id;
    const userId = req.user.id;

    try {
        const result = await pool.query(
            "DELETE FROM notes WHERE id = $1 AND user_id = $2 RETURNING *",
            [id, userId]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json({ message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
initializeDatabase().then(() => {
    app.listen(port, () => {
        console.log(`üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
        console.log(`üìÖ –ü–æ—Ä—Ç: ${port}`);
        console.log(`üîê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});